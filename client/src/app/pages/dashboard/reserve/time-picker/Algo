1) GET All employees available for that service for that day
2) for each employee
    a. GET All employee shifts for the day
    b. GET All employee appointments for the day

for each employee
# order appointments by shifts
list<Appointments> //appointments for the day
index = 0;
mapAppointmentsToShifts = map <shift, AppointmentList>>

# figure out how to order appointments by startTime
for each shift : shifts
    for each appointment : appointments
       if (appointment.minTime is in shift)
            mapAppointmentsToShifts(shift).add(appointment);
            list<Appointments>.removeAt(index); //reduce the checking list
            index++;


---->>>>for each elem in mapAppointmentToShift -> call method freeTimeSlots() which returns  map<employee,
freeTimeSlotsList>
----->>>>>for that map , each element in it -> call availableStarTimes

# method that returns all time slots where there is no appointments for a given shift
public  freeTimeSlotsList<freeTimeSlot> freeTimeSlots (shift, list<Appointments>)

freeTimeSlotsList<freeTimeSlot>
freeTimeSlot -> (startTime, endTime)
currentTimePointer //points to the next time to be checked for a free time spot
    for (list(0)
        if list(0).startTime == shift.StartTime //appointment starts at the same time as the shift
            list<Appointments>.removeAt(0);
            shift.StartTime = appointment.endTime //change the shift start to the end of the first appointment
            freeTimeSlotsList<freeTimeSlot>.add(shift,ShiftStartTime)
    currentTimePointer = shift.StartTime
    for each appointment : list<Appointment>
        freeTimeSlotsList.add(shift.StartTime, appointment.StartTime)
        currentTimePointer = appointment.EndTime //change the time pointer to point to the end of the appointment[i]
        if (currentTimePointer == shiftEndTime )//the pointer reached the end of the shift, no more search to be made
        return freeTimeSlotsList<freeTimeSlot>
    return freeTimeSlotsList<freeTimeSlot>


# for a given interval of time, and a service duration, give all possible interval of available timeslots
public availableStartTimes(freeTimeSlot, serviceDuration, interval)
    int interval = 10 mins // inteval of time between startTimes for available slots 10:10 10:20 etc
    int counter = 0
    List <DateTime> availableStartTimes
    numStartTimes // number of startTimes to display in the frontend

    if (freeTimeSlot.duration == serviceDuration)//the free time period fits exactly the chosen service
        return availableStartTimes.add(freeTimeSlot.starTime)// return immediatly that time
    else
        numStartTime  = floor [(freeTimeSlot.endTime 0 serviceDuration)/interval ]
        availableStartTimes.add(freeTimeSlot.startTime)
        counter++
        for (int i= 0; i++;. i<=numStartTime)
            availableStarTimes.add(freeTimeSlot.minTime + (i-1)*interval)
